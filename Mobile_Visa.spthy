/*

Model for mobile-apps with VISA card CDA and DDA mode
DDA mode --> occurs only in transport/transit mode  (an extra read-records and the SDAD is sent after the GPO response; only after SDAD is checked, the AC is sent to the the bank)
CDA mode --> occurs in non-transport (no SDAD sent; AC sent to the bank right after the GPO response)

==TERMINALS==
-- Terminals can be in transport and non-transport mode
-- Terminals in non-transport/shop mode do NOT ask for 'zero' values
-- Terminals in transport mode can ask for any value, include 'high' values (as per Apple's operation models)
-- Terminals in transport mode send 'MagicBytes'
-- Terminals in non-transport mode send 'MagicBytes'
-- Terminal--to--bank channel is secure
-- Terminal sends to bank an MCC code (which is different for transport and non-transport but not more refined for now)

==APPS==
-- mobile apps with a visa card,  Samsung-Pay and Apple-Pay
-- Samsung-Pay on GPO-receipt only accepts 'zero' values in transport mode
-- Apple-Pay do not check the value in transport mode
-- mobile apps have a CVR field in which they say if they CV on device, for high/low value (i.e., CVR byte 5)
-- mobile apps generate a IAD that has a format which distinguishes perceived transport from non-transport app-running mode (i.e., CVR byte 1)
-- IAD contains the CVR
-- IAD included in the AC

==BANK==

behaviour
-- can not check the IAD 
-- can check the IAD-format against the MCC code
-- can check the CVR-byte5 inside the IAD against value and IADformat to see if auth on device was performed when needed

== Results ==
1. Apple attack; 
we can make ApplePay believe it is transport mode when it is not and not do authentication on non-transit transactions; 

lemma applePay_attack --> holds: exhibit the attack trace 

2. The bank not checking the IAD lets the Apple-attack through:
 terminalModes_CDCVM_aligned_at_bankEnd  --> falsified:  finding the Apple-attack trace generically

3. Samsung-Pay protection; 
Samsung does not allow non-transport transactions to be confused with transport due to the zero-value check

lemma transportMode_onlyForZero_onApp_stops_ModeChange --> holds


4. The bank checking the CVR stops the Apple-attack
    lemma  bank_checking_CVR_stops_ModeChange --> holds

5. The bank checking the MCC against the IAD format stops the Apple-attack
    lemma   bank_checking_MCC_stops_ModeChange  --> holds

6.  The bank checking the MCC against the IAD format does not stop relaying to terminals with the same MCC
    lemma   bank_checking_MCC_allows_RelayToSameMCC  --> holds


===========================================================================
summary of summaries:

analyzed: Mobile_Visa_EMV.spthy

  terminalModes_CDCVM_aligned_at_bankEnd (all-traces): falsified - found trace (6 steps)
  applePay_attack (exists-trace): verified (21 steps)
  transportMode_onlyForZero_onApp_stops_ModeChange (all-traces): verified (172 steps)
  bank_checking_CVR_stops_ModeChange (all-traces): verified (380 steps)
  bank_checking_MCC_stops_ModeChange (all-traces): verified (190 steps)
  bank_checking_MCC_allows_RelayToSameMCC (exists-trace): verified (32 steps) 

sanity checks
  value_transp_zero (exists-trace): verified (15 steps)
  value_transp_low (exists-trace): verified (15 steps)
  value_nontransp_low (exists-trace): verified (15 steps)
  value_transp_high (exists-trace): verified (15 steps)
  value_nontransp_high (exists-trace): verified (15 steps)

  
  
  correctness_general (exists-trace): verified (32 steps)
  correctness_samsung_high_nontransport (exists-trace): verified (15 steps)
  correctness_samsung_high_transport_anyAuth (exists-trace): falsified - no trace found (26 steps)
  correctness_apple_high_nontransport (exists-trace): verified (15 steps)
  correctness_apple_high_transport_noAuth (exists-trace): verified (15 steps)

==============================================================================

*/



theory Mobile_Visa_EMV_with_MagicBytes

begin

builtins:   signing, hashing, asymmetric-encryption, xor

functions:
        Eq/2,
        NEq/2,
        f/2,
        MAC/2, MAC_arpc/2,
        p8/1,
        country/1,
        currency/1,
        computeCVR/2

predicates:
        //terminal in any mode
        //AnyMode(mode) <=> ((mode= 'transport') | (mode ='nontransport')),
        
        Equal(a,b) <=> (a =b),

        //customer authentication expected by mode
        CDCVM_OnOff_ByModes(mode,cvr) <=> ((mode= 'transport' & cvr ='noAuth') | (mode= 'nontransport' & cvr ='Auth')),

        //as per what Samsung-pay seems to do; allowing only zero on transport non-authenticated
        ZeroOnly_in_nonAuthen_Transport(cvr1, perceivedAppMode, value) <=>
        (
         (cvr1='noAuth' & perceivedAppMode = 'transport' & value= 'Zero')
        |
         (cvr1='noAuth' & perceivedAppMode = 'nontransport' & value = 'Low')
        |
         (cvr1='Auth' & perceivedAppMode = 'nontransport' & value = 'High')
        ),

	//non-transport terminals do not charge zero
        NonTransportNonZero(mode,value) <=>
        (
         (mode ='nontransport' & not (value = 'Zero') )
        |
         ( mode ='transport' )
        )


rule Terminal_Bank_Network:
    [ Send(S, R, channelID, msg) ]-->[ Recv(S, R, channelID, msg) ]

rule Generate_Amount_Low:
    [ ]--[ Once(<$amount, 'Amount'>) ]->[ !Value($amount, 'Low') ]

rule Generate_Amount_High:
    [ ]--[ Once(<$amount, 'Amount'>) ]->[ !Value($amount, 'High') ]

rule Generate_Amount_Zero:
    [ ]--[ Once(<$amount, 'Amount'>) ]->[ !Value($amount, 'Zero') ]

rule Generate_ATC:
    [ Fr(~ATC) ]-->[ !ATC(~ATC), Out(~ATC) ]

rule Generate_SDAD_Format_Visa:
    [ ]--> [ !SDADFormat('05', 'TC'), !SDADFormat('95', 'ARQC') ]

rule Create_CA:
    let pubkCA = pk(~privkCA)
        cont = <'01', $CA, pubkCA, $CA>
        cert = <cont, sign{cont}~privkCA>
    in
    [ Fr(~privkCA) ]
  --[ Once($CA),
      Role($CA, 'CA') ]->
    [ !LtkCA($CA, ~privkCA),
      !CertCA($CA, cert),
      Out(pubkCA)
    ]

rule Create_Bank:
    let pubkBank = pk(~privkBank)
        cont = <'02', $Bank, pubkBank, $CA>
        cert = <cont, sign{cont}~privkCA>
    in
    [ Fr(~privkBank),
      !LtkCA($CA, ~privkCA) ]
  --[ Once($Bank),
      Role($Bank, 'Bank') ]->
    [ !LtkBank($Bank, ~privkBank),
      !CertBank($Bank, cert),
      !IssuingCA($Bank, $CA),
      Out(pubkBank)
    ]

rule Compromise_CA:
    [ !LtkCA($CA, ~privkCA) ]
  --[ Compromise($CA) ]->
    [ Out(~privkCA)]

rule Compromise_Bank:
    [ !LtkBank($Bank, ~privkBank) ]
  --[ Compromise($Bank) ]->
    [ Out(<$Bank, ~privkBank>) ]

rule Compromise_Card:
    [ !LtkCard(~PAN, ~privkCard) ]
  --[ Compromise(~PAN) ]->
    [ Out(<~PAN, ~privkCard>) ]

rule Compromise_Bank_Card_ShK:
    [ !IssuingBank(~PAN, $Bank),
      !Shk(~PAN, ~MK) ]
  --[ Compromise($Bank), Compromise(~PAN) ]->
    [ Out(~MK) ]

rule Set_PIN:
    [ Fr(~PIN),
      Set_PIN(~PAN, CVM, $CA, $Bank) ]
  --[ NEq(CVM, 'NoCDCVM'),
      SecretPIN(~PIN),
      Honest($CA), Honest($Bank), Honest(~PAN) ]->
    [ !PIN(~PAN, ~PIN),
      !Entered_PIN(~PAN, ~PIN),
      !Entered_PIN(~PAN, 'WrongPIN')
    ]

rule Set_Records_SDA:
    [ Set_Records(~PAN, ~expDate, $CA, certBank, SSAD, CVM),
      !AIP(~PAN, <'SDA', furtherData>) ]
  -->
    [ !Records(~PAN, <~PAN, ~expDate, $CA, certBank, SSAD, CVM>) ]

rule Set_Records_NotSDA:
    let pubkCard = pk(~privkCard)
        cont = <'04', ~PAN, pubkCard, $Bank, CVM, AIP>
        certCard = <cont, sign{cont}~privkBank>
    in
    [ Set_Records(~PAN, ~expDate, $CA, certBank, SSAD, CVM),
      Fr(~privkCard),
      !AIP(~PAN, AIP),
      !IssuingBank(~PAN, $Bank),
      !LtkBank($Bank, ~privkBank) ]
  --[ NEq(fst(AIP), 'SDA'),
      SecretPrivkCard(~privkCard),
      Honest($CA), Honest($Bank), Honest(~PAN) ]->
    [ Out(pubkCard),
      !LtkCard(~PAN, ~privkCard),
      !Records(~PAN, <~PAN, ~expDate, $CA, certBank, certCard, CVM>) ]

rule Create_Card_Visa:
    let pubkCard = pk(~privkCard)
        cont = <'04', ~PAN, pubkCard, $Bank>
        certCard = <cont, sign{cont}~privkBank>
    in
    [ Fr(~PAN),
      Fr(~expDate),
      Fr(~privkCard),
      Fr(~MK),
      !LtkBank($Bank, ~privkBank),
      !CertBank($Bank, certBank),
      !IssuingCA($Bank, $CA)
    ]

  --[
        Role(~PAN, 'Card'),
        SecretPAN(~PAN),
        SecretMK(~MK),
        SecretPrivkCard(~privkCard),
        Honest($CA), Honest($Bank), Honest(~PAN),
        OnlyOnce('Create_Card_Visa')
    ]->

    [ !LtkCard(~PAN, ~privkCard),
      !AID(~PAN, 'Visa'),
      Out(pubkCard),
      !ExpirationDate(~PAN, ~expDate),
      !Shk(~PAN, ~MK),
      !IssuingBank(~PAN, $Bank),
      !Records_Visa(~PAN, ~expDate, $CA, certBank, certCard),
      Set_PIN(~PAN, 'OnlinePIN', $CA, $Bank) ]

/*
generic country/currency selector
*/
rule ValueSelector:
    let
        country= 'a'
        currency= 'b'
    in
    []
    -->
    [
        ChooseCountry(country),
        ChooseCurrency(currency)
    ]

/*generic mode selector + 
MagicByte functionality, as per TfL terminals
*/
rule ModeSelector:
    let
        value1= <'transport', 'MagicBytes'>
        value2= <'nontransport', 'NoMagicBytes'>
    in
    []
    -->
    [ChooseMode(value1), ChooseMode(value2)]


/* a terminal is in a country 
and charges in a currency
Note: useful for tap-and-pin later on
*/
 rule Create_Terminal:
    let
        cty=country(val1) //resident country of terminal
        curr=currency(val2) //default currency of terminal
        mode_Bytes=<mode,optBytes>// transport, non-transport
    in
    [
        ChooseCountry(val1), //country
        ChooseCurrency(val2), //currency
        ChooseMode(<mode,optBytes>)  //mode --transport, non-transport
       
    ]

    --[
            Terminal_Created(cty, curr, mode),
            OnlyOnce('Create_Terminal')
    ]->

    [
        Terminal_State01(cty,curr, mode, optBytes),
        Role($Terminal, 'Terminal')
    ]


rule Terminal_Sends_GPO_AnyValue_AnyMode_Visa:
    let date = 'YYMMDD'
        typeP = 'Purchase'
        TTQ='ARQC' 
        PDOL = <TTQ, $amount, value, cty, curr, date, typeP, ~UN>
    in
    [
        Fr(~UN),
        !Value($amount, value),
        Terminal_State01(cty,curr, mode, optBytes)
    ]

    --[
        OneTerminal(),
        Role($Terminal, 'Terminal'),
        _restrict(NonTransportNonZero(mode,value)), //non-transport terminals do not charge 0
        Terminal_TTQ_out(PDOL,mode, value),
        Terminal_TTQ_out_full(~UN,PDOL,mode, value),
        OnlyOnce('Terminal_Sends_GPO_AnyValue_AnyMode_Visa')
    ]->

    [
        /*The mode of the terminal determines the following behaviour:
        -- transport terminals always sent "MagicBytes"; see optBytes
        -- non-transport terminals never sent any special bytes,"NoMagicBytes"; see optBytes
        */
        Out(<optBytes, 'GET_PROCESSING_OPTIONS', PDOL>),
        
        Terminal_Sent_GPO_Visa($Terminal, PDOL),
        Terminal_TTQ_Sent(PDOL,mode,$amount,value)
    ]


/* 
===
computeCVR rule --- what the mobile app with put in the CVR in the IAD
predicate  ComputedCVR produced to be consumed later for the full logic
===

Transport case. Logic:
1. in transport mode, no authentication required no matter the value 
2. Samsung will block any non-zero values (later on but via ComputedCVR produced here), 
but Apple will allow any value
*/
rule computeCVR_Transport:
    let
        PDOL=<TTQ, $amount,value, country, currency, date, typeP, UN>
    in
    [
        In(<'MagicBytes','GET_PROCESSING_OPTIONS', PDOL>)
    ]

    --[
        ComputeCVR(value, 'transport', 'noAuth'),
        OnlyOnce('computeCVR')
    ]->

    [
        ComputedCVR('noAuth',value, 'transport', PDOL, 'apple'), //any value allowed for Apple
        ComputedCVR('noAuth',value, 'transport', PDOL, 'samsung') //Samsung will enforce zero only later
    ]

/* 
===
computeCVR rule --- what the mobile app with put in the CVR in the IAD
predicate  ComputedCVR produced to be consumed later for the full logic
===

Non-transport case1. Logic:
in NonTransport mode, for high values, all phones require authentication 
*/
rule computeCVR_NonTransport_High:
    let
        PDOL=<TTQ, $amount, 'High', country, currency, date, typeP, UN>
    in
    [
        In(<'NoMagicBytes', 'GET_PROCESSING_OPTIONS', PDOL>)
    ]

    --[
        ComputeCVR('High', 'nontransport', 'Auth'),
        OnlyOnce('computeCVR')
    ]->

    [
        ComputedCVR('Auth','High', 'nontransport', PDOL, 'apple'), //auth on device - value: high
        ComputedCVR('Auth','High', 'nontransport', PDOL, 'samsung')  //auth on device - value: high
    ]

/* 
===
computeCVR rule --- what the mobile app with put in the CVR in the IAD
predicate  ComputedCVR produced to be consumed later for the full logic
===

Non-transport case2. Logic:
 for non-transport, no authentication required for low values
!!! NOTE: that non-transport mode does not allow for zero values
*/
rule computeCVR_Low_NonTransport:
    let
        PDOL=<TTQ, $amount, 'Low', country, currency, date, typeP, UN>
    in
    [
        In(<'NoMagicBytes','GET_PROCESSING_OPTIONS', PDOL>)
    ]

    --[
        ComputeCVR('Low', 'nontransport', 'noAuth'),
        OnlyOnce('computeCVR')
    ]->

    [
        ComputedCVR('noAuth','Zero_Low', 'nontransport', PDOL, 'apple'), //no auth on device - low, zero will be disallowed later
        ComputedCVR('noAuth','Zero_Low', 'nontransport', PDOL, 'samsung') //no auth on device - low, zero will be disallowed later

    ]

/*
ApplePay app receives PDOL 
in models track Handset('apple')

IAD will contain CVRbyte1 -- app + mode ; e.g. Apple-Transit, Apple-Nontransit
IAD will contain CVR byte5 -- authentication on device done or not

This captures the Apple behaviour which allows for noAuth in transport mode 
even for non-zero values including high ones.
*/
rule Card_Responds_To_GPO_EMV_Visa_Apple:
    let
        PDOL = <TTQ, $amount, value, country, currency, date, typeP, UN>
        track2ED = <~PAN, ~expDate>
        CID = 'ARQC'
        CTQ = CDCVM_noCDCVM
        CVR =<CDCVM_noCDCVM,valueType> //card judgement
        IAD = <'IADmobile', CID, CVR, perceivedAppMode>
        AIP = <'EMVDDA', $furtherData>
        AC = MAC(f(~MK, ATC), <PDOL, AIP, ATC, IAD>)
        transaction = <~PAN, AIP, CTQ, PDOL, ATC, AC, IAD>
        
        X = <PDOL, CTQ>
        T = h(<X, CID, ATC, AC, IAD>)
        SDAD = sign{'05', CID, AC, T, UN}~privkCard
    in
    [
        ComputedCVR(CDCVM_noCDCVM,valueType, perceivedAppMode, PDOL, 'apple'),
        !Shk(~PAN, ~MK),
        !AID(~PAN, 'Visa'),
        !LtkCard(~PAN, ~privkCard),
        !ExpirationDate(~PAN, ~expDate),
        !IssuingBank(~PAN, $Bank),
        !ATC(ATC)
    ]

  --[
        OneCard(),
        Handset('apple'),
        Once(<~PAN, ATC, 'Card'>),
        Role(~PAN,'Card'),
        Card_PostGPO(~PAN, PDOL, value, perceivedAppMode, CDCVM_noCDCVM),
        
         // a la apple-pay; no real check on value re the CVR/CDCVM
        Card_PostGPONoCheckShort(~PAN, CDCVM_noCDCVM, perceivedAppMode, valueType),
        Card_PostGPONoCheckShortest(~PAN, valueType, perceivedAppMode),
        
        OnlyOnce('Card_Responds_To_GPO_EMV_Visa_NoCheck')
    ]->

    [
        Out(< AIP, 'AFL', track2ED, IAD, AC, CID, ATC, CTQ >),
        Card_PostGPO2(~PAN, CDCVM_noCDCVM, perceivedAppMode, valueType, X, T, SDAD)
    ]

/*
SamsungPay app receives PDOL 
in models track Handset('samsung')

IAD will contain CVRbyte1 -- app + mode ; e.g. Apple-Transit, Apple-Nontransit
IAD wil contain CVR byte5 -- authentication on device done or not

This models the Samsung phone behaviour which only allows for zero values in transport mode
this is enforced by a restriction; see _restrict(...)
*/
rule Card_Responds_To_GPO_EMV_Visa_Samsung:
    let
        PDOL = <TTQ, $amount, value, country, currency, date, typeP, UN>
        track2ED = <~PAN, ~expDate>
        CID = 'ARQC'
        CTQ = CDCVM_noCDCVM
        CVR =<CDCVM_noCDCVM,valueType> //card judgement
        IAD = <'IADmobile', CID, CVR, perceivedAppMode>
        AIP = <'EMVDDA', $furtherData>
        AC = MAC(f(~MK, ATC), <PDOL, AIP, ATC, IAD>)
        transaction = <~PAN, AIP, CTQ, PDOL, ATC, AC, IAD>

  
  
        X = <PDOL, CTQ>
        T = h(<X, CID, ATC, AC, IAD>)
        SDAD = sign{'05', CID, AC, T, UN}~privkCard
    
    in
    [
        ComputedCVR(CDCVM_noCDCVM,valueType, perceivedAppMode, PDOL,'samsung'),
        !Shk(~PAN, ~MK),
        !AID(~PAN, 'Visa'),
         !LtkCard(~PAN, ~privkCard),
        !ExpirationDate(~PAN, ~expDate),
        !IssuingBank(~PAN, $Bank),
        !ATC(ATC)
    ]

  --[
        OneCard(),
        Handset('samsung'),
        Once(<~PAN, ATC, 'Card'>),
        Role(~PAN,'Card'),
        Card_PostGPO(~PAN, PDOL, value, perceivedAppMode, CDCVM_noCDCVM),
        
        //Samsung does not allow non-zero in transport mode
        _restrict(ZeroOnly_in_nonAuthen_Transport(CDCVM_noCDCVM, perceivedAppMode, value)),
        
        Card_PostGPONoCheckShort(~PAN, CDCVM_noCDCVM, perceivedAppMode, valueType),
        Card_PostGPONoCheckShortest(~PAN, valueType, perceivedAppMode),
        
        OnlyOnce('Card_Responds_To_GPO_EMV_Visa_NoCheck')
    ]->

    [
 
        Out(< AIP, 'AFL', track2ED, IAD, AC, CID, ATC, CTQ >),
        Card_PostGPO2(~PAN, CDCVM_noCDCVM, perceivedAppMode, valueType, X, T, SDAD)
    ]





/*
Terminal receives answer to GPO
Case:non-transport terminal

If it is a non-transport terminal, then no extra read-records are asked and the readers 
 sends AC/transaction + MCC to the bank/payment-networks

*/
rule NonTransportTerminal_Receives_Records_EMV_Visa:
    let
        CVR=<CDCVM_noCDCVM,valueType>
        IAD=<'IADmobile', CID, CVR, perceivedAppMode>
        AIP=<'EMV', furtherData>
        track2ED = <PAN, expDate>
        answerGPO=<  AIP, 'AFL',  track2ED, IAD, AC, CID, ATC, CTQ >
        PDOL = <TTQ, amount, value, cty, curr, date, typeP, ~UN>

        MCC=mode // simplified version of MCC groups as transport and non-transport
        transaction = <PAN, AIP, CTQ, PDOL, ATC, AC, IAD>
        
        transactionFull = <PAN, AIP, CVR, PDOL, ATC, AC, IAD, MCC> //will be sending MCC too, to the bank and payment networks
     in
    [
        In(answerGPO), 
        Terminal_TTQ_Sent(PDOL,mode,amount,value),
        Fr(~channelID),
        !IssuingBank(PAN, $Bank),
        !CertBank($Bank, <<'02', $Bank, pubkBank, $CA>, sign2>)
    ]

  --[
        Terminal_AC_in(PDOL,'nontransport',value,CDCVM_noCDCVM), //non-transport terminal, no SDAD to follow
        Eq(CTQ,CDCVM_noCDCVM), // weak check
        Role($Terminal, 'Terminal'),
        OnlyOnce('Terminal_Receives_Records_EMV_Visa')
    ]->

    [
        NonTransportTerminal_Sends_AC($Terminal, $CA, $Bank, pubkBank, transactionFull, mode, ~channelID),
        Send($Terminal, $Bank, <~channelID, 'Visa', '1'>, <transactionFull>)
   ]
   
   /*
Terminal receives answer to GPO
Case: transport terminal

If it is a transport terminal, then an extra read-records is asked and the readers
It sends AC/transaction + MCC to the bank

*/
rule TransportTerminal_Receives_Records_EMV_Visa:
    let
        CVR=<CDCVM_noCDCVM,valueType>
        IAD=<'IADmobile', CID, CVR, perceivedAppMode>
        AIP=<'EMV', furtherData>
        track2ED = <PAN, expDate>
        answerGPO=<  AIP, 'AFL',  track2ED, IAD, AC, CID, ATC, CTQ >
        PDOL = <TTQ, amount, value, cty, curr, date, typeP, ~UN>

        MCC=mode // simplified version of MCC groups as transport and non-transport
        transaction = <PAN, AIP, CTQ, PDOL, ATC, AC, IAD>
        
        transactionFull = <PAN, AIP, CVR, PDOL, ATC, AC, IAD, MCC> // will be sending MCC too, to the bank and payment networks
     in
    [
        In(answerGPO), 
        Terminal_TTQ_Sent(PDOL,mode,amount,value),
        Fr(~channelID),
        !IssuingBank(PAN, $Bank),
        !CertBank($Bank, <<'02', $Bank, pubkBank, $CA>, sign2>)
    ]

  --[
        Terminal_AC_in(PDOL,'transport',value,CDCVM_noCDCVM), //transport terminal,  SDAD to follow
        Eq(CTQ,CDCVM_noCDCVM), // weak check
        Role($Terminal, 'Terminal'),
        OnlyOnce('Terminal_Receives_Records_EMV_Visa')
    ]->

    [
        Out(<'ReadRecords2Transport'>),
        TransportTerminal_Prepared_AC($Terminal, $CA, $Bank, pubkBank, transactionFull, mode,CTQ,~UN)
       
   ]

/*
Card responds to extra read record in transport mode
and sends SDAD

*/
rule Card_Responds_To_Extra_Read_Record:
    let

       record=<$CA, certBank, certCard, CVM>
       
    in
    [
        
        In(<'ReadRecords2Transport'>),
        !Shk(~PAN, ~MK),
        !AID(~PAN, 'Visa'),
        !ExpirationDate(~PAN, ~expDate),
        !IssuingBank(~PAN, $Bank),
         !LtkCard(~PAN, ~privkCard),
        !ATC(ATC),
        !Records(~PAN, <~PAN, ~expDate, $CA, certBank, certCard, CVM>),
        Card_PostGPO2(~PAN, CDCVM_noCDCVM, perceivedAppMode, valueType, X, T, SDAD )
    ]

  --[
        OneCard(),
        Once(<~PAN, ATC, 'Card'>),
        Role(~PAN,'Card'),
        OnlyOnce('Card_Responds_To_Extra_Record'),
        Card_SentSDAD(~PAN, CDCVM_noCDCVM, perceivedAppMode, valueType, SDAD )
    ]->

    [
        Out(< 'DDA', record, SDAD>)
    ]
   
   
rule TransportTerminal_Receives_ExtraRecords_SDAD:
    let
   
       record=<$CA, <<'02', $Bank, pubkBank, $CA>, sign2>, <<'04', PAN, pubkCard, $Bank>, sign3>, CVM> 
        transactionFull = <PAN, AIP, CVR, PDOL, ATC, AC, IAD, MCC>     
        X = <PDOL, CTQ>
        T = h(<X, 'ARQC', ATC, AC, IAD>)
       
    in
    [
        In(<'DDA', record, SDAD>), 
        TransportTerminal_Prepared_AC($Terminal, $CA, $Bank, pubkBank, transactionFull, mode,CTQ,~UN),
	Fr(~channelID),
        !IssuingBank(PAN, $Bank),
        !CertBank($Bank, <<'02', $Bank, pubkBank, $CA>, sign2>),
        !CertCA($CA, <<'01', $CA, pubkCA, $CA>, sign1>)
    ]

  --[
        Eq(mode,'transport'), //transport terminal
        Eq( verify(sign1, <'01', $CA, pubkCA, $CA>, pubkCA), true ),
      	Eq( verify(sign2, <'02', $Bank, pubkBank, $CA>, pubkCA), true ),
        Eq( verify(sign3, <'04', PAN, pubkCard, $Bank>, pubkBank), true ),
        Eq( verify(SDAD, <'05', 'ARQC', AC, T, ~UN>, pubkCard), true ),
        Role($Terminal, 'Terminal'),
        OnlyOnce('Terminal_Receives_SDAD')
    ]->

    [
       TransportTerminal_Prepared_AC_CheckedSDAD($Terminal, $CA, $Bank, pubkBank, transactionFull),
       Send($Terminal, $Bank, <~channelID, 'Visa', '1'>, <transactionFull>)
   ]   
   
   

/*Bank receives AC

 Case1: Bank does no real checks on the IAD 
 */
 rule Bank_Receives_AC_Visa_noIAD_check:
    let
        CVR=<cardValidation,cardValue>
        IAD=<'IADmobile', CID, CVR, format>
        PDOL = <'ARQC', amount, value, cty, curr, date, typeP, UN>
        transactionFull = <~PAN, AIP, CVM, PDOL, ATC, AC, IAD, MCC>
    in
    [

        Recv($Terminal, $Bank, <channelID, 'Visa', '1'>, <transactionFull>),
        !Shk(~PAN, ~MK),
        !IssuingBank(~PAN, $Bank)
    ]

  --[
        //No Checks
       
        // We are _not_ checking the above against AC from the card; on purpose -- extreme
        //Eq(AC, MAC(f(~MK, ATC), <PDOL, AIP, ATC, IAD>)),
       
        Once(<~PAN, ATC, 'Bank'>),
        Bank_Got_AC_Simple(~PAN, PDOL, MCC),
        Bank_Got_AC(~PAN, value, cardValidation,cardValue, MCC,MCC)
    ]->

    [
        //protocol finished at bank side
        Bank_Checked_AC_Visa($Bank, $Terminal, transactionFull, channelID, AC)
    ]

/*
    Bank receives AC

    Case2: Bank does checks on the IAD/CVR, but not on the MCC 
*/
 rule Bank_checkCVR_noCheckMCC:
    let
        CVR=<cardValidation,cardValue>
        IAD=<'IADmobile', CID, CVR, format>
        PDOL = <'ARQC', amount, value, cty, curr, date, typeP, UN>
        transactionFull = <~PAN, AIP, CVM, PDOL, ATC, AC, IAD, MCC>
    in
    [
        Recv($Terminal, $Bank, <channelID, 'Visa', '1'>, <transactionFull>),
        !Shk(~PAN, ~MK),
        !IssuingBank(~PAN, $Bank)
    ]
  --[
        Once(<~PAN, ATC, 'Bank'>),
        Eq(AC, MAC(f(~MK, ATC), <PDOL, AIP, ATC, IAD>)), // checking the above against AC from the card

        _restrict(CDCVM_OnOff_ByModes(format, cardValidation)), //checking CDCVM happens on non-transport; cardValidation is in the CVR; 
        Bank_Got_AC_Simple(~PAN, PDOL, format),
        Bank_Got_AC_checkedCVR(~PAN, value, cardValidation,cardValue, format)
    ]->
    [
        //protocol finished
        Bank_Checked_AC_Visa($Bank, $Terminal, transactionFull, channelID, AC)
    ]

/*
    Bank receives AC
    Case3: Bank does not check on the CVR, but does check the MCC against the IAD format
 */
 rule Bank_ChecksMCC_noCheckCVR:
    let
        CVR=<cardValidation,cardValue>
        IAD=<'IADmobile', CID, CVR, format>
        PDOL = <'ARQC', amount, value, cty, curr, date, typeP, UN>
        transactionFull = <~PAN, AIP, CVM, PDOL, ATC, AC, IAD, MCC>
    in
    [
        Recv($Terminal, $Bank, <channelID, 'Visa', '1'>, <transactionFull>),
        !Shk(~PAN, ~MK),
        !IssuingBank(~PAN, $Bank)
    ]
  --[
        Once(<~PAN, ATC, 'Bank'>),
        Eq(AC, MAC(f(~MK, ATC), <PDOL, AIP, ATC, IAD>)), // checking the above against AC from the card
        Eq(format,MCC), //check MCC against IAD format

        Bank_Got_AC_Simple(~PAN, PDOL, format),
        Bank_Got_checkMCC(~PAN, cardValue,format,MCC),
        Bank_Got_checkMCC_full(UN,~PAN, cardValue,format,MCC)
    ]->
    [
        //protocol finished
        Bank_Checked_AC_Visa($Bank, $Terminal, transactionFull, channelID, AC)
    ]
    

restriction equal:
  "All a b #i. Eq(a, b)@i ==> a = b"

restriction not_equal:
  "All a #i. NEq(a, a)@i ==> F"

restriction once:
  "All a #i #j. Once(a)@i & Once(a)@j ==> #i = #j"

restriction unique_role:
  "All A r1 r2 #i #j. Role(A, r1)@i & Role(A, r2)@j ==> r1 = r2"

/*
==Sanity check1: model fully executable==
*/
lemma correctness_general:
  exists-trace
  "
    Ex cty curr mode appMode PAN PDOL value CDCVM_noCDCVM mcc 
    #t01 #t02 #t03 #t04 #t05 #t06
    .
    Terminal_Created(cty, curr, mode) @ t01
    &
    Terminal_TTQ_out(PDOL, mode, value) @ t02
    &
    ComputeCVR(value, appMode, CDCVM_noCDCVM) @t03
    &
    Card_PostGPO(PAN, PDOL,value, appMode, CDCVM_noCDCVM) @ t04
    &
    Terminal_AC_in(PDOL,mode,value,CDCVM_noCDCVM) @ t05
    &
    Bank_Got_AC_Simple(PAN, PDOL,mcc) @ t06
    &
    t01<t02
    &
    t02<t03
    &
    t03<t04
    &
    t04<t05
    &
    t05<t06
    &
    (mode=appMode)
    & 
    (mode=mcc)
  
    //restrict the trace further by preventing each rule to fire more than once
    &   (All event #i #j . OnlyOnce(event) @ i & OnlyOnce(event) @ j ==> #i=#j)
   "

/*
==Sanity check2 ==
to pass: samsung-pay authenticated high transactions in non-transport mode
*/
lemma correctness_samsung_high_nontransport: exists-trace
"
    Ex PAN PDOL cardValue MCC #t01 #t02
    .
    Card_PostGPO(PAN, PDOL,'High', 'nontransport', 'Auth') @ t01
    &
    Handset('samsung') @ t01
    &
    Bank_Got_AC(PAN, 'High', 'Auth' ,cardValue, 'nontransport' ,MCC) @ t02
    &
    #t01<#t02
    //restrict the trace further by preventing each rule to fire more than once
    &   (All event #i #j . OnlyOnce(event) @ i & OnlyOnce(event) @ j ==> #i=#j)
"

/*
==Sanity check2 ==
 to fail, meaning that samsung-pay does not do high transactions in transport mode
*/
lemma correctness_samsung_high_transport_anyAuth: exists-trace
"
    Ex PAN PDOL auth cardValue MCC #t01 #t02
    .
    Card_PostGPO(PAN, PDOL,'High', 'transport', auth) @ t01
    &
    Handset('samsung') @ t01
    &
    Bank_Got_AC(PAN, 'High', auth ,cardValue, 'transport' ,MCC) @ t02
    &
    #t01<#t02
    //restrict the trace further by preventing each rule to fire more than once
    &   (All event #i #j . OnlyOnce(event) @ i & OnlyOnce(event) @ j ==> #i=#j)
"

/*
==Sanity check3 ==
to pass: apple-pay does do high transactions in non-transport mode
*/
lemma correctness_apple_high_nontransport: exists-trace
"
    Ex PAN PDOL cardValue MCC #t01 #t02
    .
    Card_PostGPO(PAN, PDOL,'High', 'nontransport', 'Auth') @ t01
    &
    Handset('apple') @ t01
    &
    Bank_Got_AC(PAN, 'High', 'Auth' ,cardValue, 'nontransport' ,MCC) @ t02
    &
    #t01<#t02
    //restrict the trace further by preventing each rule to fire more than once
    &   (All event #i #j . OnlyOnce(event) @ i & OnlyOnce(event) @ j ==> #i=#j)
"

/*
==Sanity check4 ==
to pass: apple-pay does do high transactions in transport mode with no authentication required
*/
lemma correctness_apple_high_transport_noAuth: exists-trace
"
    Ex PAN PDOL cardValue MCC #t01 #t02
    .
    Card_PostGPO(PAN, PDOL,'High', 'transport', 'noAuth') @ t01
    &
    Handset('apple') @ t01
    &
    Bank_Got_AC(PAN, 'High', 'noAuth' ,cardValue, 'transport' ,MCC) @ t02
    &
    #t01<#t02
    //restrict the trace further by preventing each rule to fire more than once
    &   (All event #i #j . OnlyOnce(event) @ i & OnlyOnce(event) @ j ==> #i=#j)
"


/*
to pass:
The exact trace of our apple-attack exhibited via exist-trace lemma
*/
lemma applePay_attack:
  exists-trace
  "
    Ex cty curr  PAN PDOL PDOL1 value CDCVM_noCDCVM CDCVM_noCDCVM1  valuecard    formatIAD mcc
    #t01 #t02 #t03 #t04 #t05 #t06
    .
    Terminal_Created(cty, curr, 'nontransport') @ t01 //non-transport terminal
    &
    Terminal_TTQ_out(PDOL,'nontransport', 'Low') @ t02 // sends PDOL 
    &
    ComputeCVR(valuecard, 'transport', CDCVM_noCDCVM1) @t03 // card believes it is in transport mode, i.e., attacker modifying PDOL
    &
    Card_PostGPO(PAN, PDOL1,valuecard, 'transport', CDCVM_noCDCVM1) @ t04 //card answers to GPO
    &
    Terminal_AC_in(PDOL,'nontransport',value,CDCVM_noCDCVM) @ t05 //the non-transport terminal sends the AC to the bank
    &
    Bank_Got_AC(PAN, valuecard,  'noAuth', 'High', formatIAD, mcc) @ t06 // bank receives the "no device validation; non-zero value" but does not check the IAD, etc
    &
    t01<t02
    &
    t02<t03
    &
    t03<t04
    &
    t04<t05
    &
    t05<t06
    //restrict the trace further by preventing each rule to fire more than once
    &   (All event #i #j . OnlyOnce(event) @ i & OnlyOnce(event) @ j ==> #i=#j)
   "

/*
all-traces lemma looking for abuse of CDCDM in transport-nontransport modes, should fail:

//i.e., generic way of looking for the apple-attack
*/
lemma terminalModes_CDCVM_aligned_at_bankEnd:

"All  PAN valuecard mcc #t02
    .
    // no device validation & no validation at the bank side
    Bank_Got_AC(PAN, valuecard,  'noAuth', 'High', 'nontransport', mcc) @ t02

    ==>
    // The phone had the same value and indeed also was in nontransport mode
    (
        Ex PDOL CDCVM_noCDCVM #t01 . 
        Card_PostGPO(PAN, PDOL,valuecard, 'nontransport', CDCVM_noCDCVM) @ t01
        & t01<t02
    )
    |
    ( (Ex A #a. Compromise(A)@a))
"

/*
to pass:

SamsungPay does not suffer from the Apple-Pay attack as it does not allow for non-zero payments in transport mode
*/
lemma transportMode_onlyForZero_onApp_stops_ModeChange:

"All  PAN valuecard modeEnd mcc #t01 #t02
    .
    //if we are using an app that only allows zero payments 
    //in transit/transport mode
    Handset('samsung') @ t01
    &
    
    // no device validation; zero or low value at the bank
    Bank_Got_AC(PAN, valuecard,  'noAuth', 'Zero_Low', modeEnd, mcc) @ t02

    ==>
    // The phone does not allow for non-authentication of non-zero values in transport mode
    not(Ex PDOL . Card_PostGPO(PAN, PDOL,valuecard, 'transport', 'NoCDCVM') @ t01 
    & not (valuecard = 'Zero')     
    )
    |
    (
     Ex A #a. Compromise(A)@a
    )
"


/*
to pass:

Apple attack goes away when issuers check the IAD 
(as only transport should have CVR byte5 bit2 on 0)

*/
lemma bank_checking_CVR_stops_ModeChange:

"All PAN value valuecard iadFormat auth  #t02
    .
    //  device validation -- auth; some limit (high, low) at the bank
    Bank_Got_AC_checkedCVR(PAN, value,  auth, valuecard,  iadFormat) @ t02
     ==>
    /* 
        The phone saw identified the mode mirrors it in the iadFormat, and its  CDCVM 
        status in 'auth' is as the bank got it
    */
    ( Ex #t01 . Card_PostGPONoCheckShort(PAN, auth,  iadFormat, valuecard) @ t01
    & t01<t02
    ) |
    ( (Ex A #a. Compromise(A)@a))
"

/*
to pass:

Apple attack goes away if because issuers check the MCCs against the iadFormat
(as only transport should have CVR byte5 bit2 on 0)

*/
lemma bank_checking_MCC_stops_ModeChange:

"All PAN valuecard  iadFormat   mcc   #t02
    .
    //  banks checks iadFormat against mcc
     Bank_Got_checkMCC(PAN, valuecard,  iadFormat, mcc) @ t02
    
    ==>
    // The phone perceived an appMode  issued this 'iadFormat' that the bank got
    ( Ex #t01 . Card_PostGPONoCheckShortest(PAN, valuecard,  iadFormat ) @ t01
    & t01<t02
    ) |
    ( (Ex A #a. Compromise(A)@a))
"


/*
to prove:

it is possible to relay a transaction from terminals with the same MCC
*/
lemma bank_checking_MCC_allows_RelayToSameMCC:
exists-trace
  "
    Ex ID1 ID2 mode PAN PDOL1 PDOL2 value  CDCVM_noCDCVM1     
    formatIAD 
    mcc
    #t01 #t02 #t03 #t04 
    #t05 
    #t06
    .
    Terminal_TTQ_out_full(ID1, PDOL1,mode, 'Low')  @ t01  //real terminal
    &
    Terminal_TTQ_out_full(ID2,PDOL2,mode, 'Low') @ t02   //relay terminal
    &
    ComputeCVR(value, mode, CDCVM_noCDCVM1) @t03      //card gets initial message
    &
    Card_PostGPO(PAN, PDOL2,value, mode, CDCVM_noCDCVM1) @ t04 //card gets GPO  from relay terminal 
    &
    Terminal_AC_in(PDOL2,mode,value,CDCVM_noCDCVM1) @ t05  //relay terminal got AC
        &
     Bank_Got_checkMCC_full(ID1,PAN, value,    formatIAD, mcc) @ t06  //bank checks real terminal and alllow
        &
    t01<t02
    &
    t02<t03
    &
    t03<t04
    &
    t04<t05
    &
    t05<t06
   "

 






/*simple sanity check*/
lemma value_transp_zero:
  exists-trace
  "Ex PAN pdol   iadFormat  CDCVM_noCDCVM #i #j.
    i < j &
    Terminal_TTQ_out(pdol,'transport','Zero')@i &
    Card_PostGPO(PAN, pdol,'Zero',  iadFormat, CDCVM_noCDCVM)@j &
    (All #a #b. OneCard()@a & OneCard()@b ==> #a = #b) &
    (All #a #b. OneTerminal()@a & OneTerminal()@b ==> #a = #b) &
    (All A B r #a #b. Role(A, r)@a & Role(B, r)@b ==> A = B) &
    not (Ex A #a. Compromise(A)@a)
    //restrict the trace further by preventing each rule to fire more than once
    &   (All event #i #j . OnlyOnce(event) @ i & OnlyOnce(event) @ j ==> #i=#j)
    "


/*simple sanity check*/
lemma value_transp_low:
  exists-trace
  "Ex PAN pdol   iadFormat  CDCVM_noCDCVM #i #j.
    i < j &
    Terminal_TTQ_out(pdol,'transport','Low')@i &
    Card_PostGPO(PAN, pdol,'Low',  iadFormat , CDCVM_noCDCVM)@j &
    (All #a #b. OneCard()@a & OneCard()@b ==> #a = #b) &
    (All #a #b. OneTerminal()@a & OneTerminal()@b ==> #a = #b) &
    (All A B r #a #b. Role(A, r)@a & Role(B, r)@b ==> A = B) &
    not (Ex A #a. Compromise(A)@a)
    //restrict the trace further by preventing each rule to fire more than once
    &   (All event #i #j . OnlyOnce(event) @ i & OnlyOnce(event) @ j ==> #i=#j)
    "

/*simple sanity check*/
lemma value_nontransp_low:
  exists-trace
  "Ex PAN pdol   iadFormat  CDCVM_noCDCVM #i #j.
    i < j &
    Terminal_TTQ_out(pdol,'nontransport','Low')@i &
    Card_PostGPO(PAN, pdol,'Low',  iadFormat, CDCVM_noCDCVM)@j &
    (All #a #b. OneCard()@a & OneCard()@b ==> #a = #b) &
    (All #a #b. OneTerminal()@a & OneTerminal()@b ==> #a = #b) &
    (All A B r #a #b. Role(A, r)@a & Role(B, r)@b ==> A = B) &
    not (Ex A #a. Compromise(A)@a)
    //restrict the trace further by preventing each rule to fire more than once
    &   (All event #i #j . OnlyOnce(event) @ i & OnlyOnce(event) @ j ==> #i=#j)
    "

/*simple sanity check*/
lemma value_transp_high:
  exists-trace
  "Ex PAN pdol   iadFormat  CDCVM_noCDCVM #i #j.
    i < j &
    Terminal_TTQ_out(pdol,'transport','High')@i &
    Card_PostGPO(PAN, pdol,'High',  iadFormat, CDCVM_noCDCVM)@j &
    (All #a #b. OneCard()@a & OneCard()@b ==> #a = #b) &
    (All #a #b. OneTerminal()@a & OneTerminal()@b ==> #a = #b) &
    (All A B r #a #b. Role(A, r)@a & Role(B, r)@b ==> A = B) &
    not (Ex A #a. Compromise(A)@a)
    //restrict the trace further by preventing each rule to fire more than once
    &   (All event #i #j . OnlyOnce(event) @ i & OnlyOnce(event) @ j ==> #i=#j)
    "

/*simple sanity check*/    
lemma value_nontransp_high:
  exists-trace
  "Ex PAN pdol   iadFormat  CDCVM_noCDCVM #i #j.
    i < j &
    Terminal_TTQ_out(pdol,'nontransport','High')@i &
    Card_PostGPO(PAN, pdol,'High',  iadFormat, CDCVM_noCDCVM)@j &
    (All #a #b. OneCard()@a & OneCard()@b ==> #a = #b) &
    (All #a #b. OneTerminal()@a & OneTerminal()@b ==> #a = #b) &
    (All A B r #a #b. Role(A, r)@a & Role(B, r)@b ==> A = B) &
    not (Ex A #a. Compromise(A)@a)
    //restrict the trace further by preventing each rule to fire more than once
    &   (All event #i #j . OnlyOnce(event) @ i & OnlyOnce(event) @ j ==> #i=#j)
    "



end











